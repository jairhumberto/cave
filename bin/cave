#!/usr/bin/env php
<?php
/**
 * Squille Cave (https://github.com/jairhumberto/Cave)
 *
 * MIT License
 *
 * Copyright (c) 2022 Jair Humberto
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

define("CAVE_DIR", getcwd() . DIRECTORY_SEPARATOR . "cave" . DIRECTORY_SEPARATOR);

$configFile = CAVE_DIR . "config.php";

if (!file_exists($configFile)) {
    print "Config file not found at $configFile";
    exit(1);
}

$config = include $configFile;

if (!array_key_exists("database", $config)) {
    print "Key 'database' not found in the configuration file";
    exit(1);
}

$database = $config["database"];

if (!array_key_exists("dbhost", $database)) {
    print "Key 'dbhost' not found inside the 'database' key";
    exit(1);
}

$dbhost = $database["dbhost"];

if (!array_key_exists("dbuser", $database)) {
    print "Key 'dbuser' not found inside the 'database' key";
    exit(1);
}

$dbuser = $database["dbuser"];

if (!array_key_exists("dbpassword", $database)) {
    print "Key 'dbpassword' not found inside the 'database' key";
    exit(1);
}

$dbpassword = $database["dbpassword"];

if (!array_key_exists("dbname", $database)) {
    print "Key 'dbname' not found inside the 'database' key";
    exit(1);
}

$dbname = $database["dbname"];
$xmlFile = CAVE_DIR . "database.xml";

if (!file_exists($xmlFile)) {
    print "XML file not found at $xmlFile";
    exit(1);
}

$xml = new DOMDocument();
$loaded = $xml->load($xmlFile);

if (!$loaded) {
    print "Malformed XML file";
    exit(1);
}

require getcwd()
      . DIRECTORY_SEPARATOR . 'vendor'
      . DIRECTORY_SEPARATOR . 'autoload.php';

$model = new Squille\Cave\Model($xml);

$connection = new PDO("mysql:host={$dbhost};dbname={$dbname}", $dbuser, $dbpassword);
$impl = new Squille\Cave\DatabaseImplementation($connection);

$ul = $impl->integrity($model);

if ($ul->length()) {
    foreach ($ul->getItens() as $unconformance) {
        echo " == " . $unconformance->getDescription() . " == " . "\n";
        $unconformance->fix($connection);
    }
    
    $impl2 = new Squille\Cave\DatabaseImplementation($connection);
    $ul2 = $impl2->integrity($model); // improve it later, the problem here was the auto_increment that is not created at first loop.
    
    foreach ($ul2->getItens() as $unconformance2) {
        $unconformance2->fix($connection);
    }

    echo " == Done == ";
} else {
    echo "The database is lined up with the model";
}

//
// Initial seeding.
//
$seedFile = CAVE_DIR . "seed.php";
if (file_exists($seedFile)) {
    $seedObj = require $seedFile;

    switch ($argv[1]) {
        case "create":
            $seedObj->create($connection);
        break;
        case "update":
            $seedObj->update($connection);
        break;
        default:
            throw new Exception("Invalid cave argument: " . $argv[1]);
    }
}
